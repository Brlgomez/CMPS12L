head	1.2;
access;
symbols;
locks;
comment	@ * @;


1.2
date	2014.02.28.04.04.37;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.02.26.20.19.29;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@// $Id: queue.c,v 1.9 2013-05-01 13:22:44-07 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

typedef struct queue_node queue_node;
struct queue_node {
  queue_item_t item;
  queue_node *link;
};

struct queue {
  queue_node *front;
  queue_node *rear;
};


queue *new_queue (void) {
  queue *nqueue = malloc(sizeof(struct queue));
  assert (nqueue != NULL);
  nqueue->front = NULL;
  nqueue->rear = NULL;
  return nqueue;
}

void free_queue (queue *this) {
  assert (isempty_queue (this));
  free (this);
}

void insert_queue (queue *this, queue_item_t item) {
  queue_node *tmp = malloc(sizeof(struct queue_node));
  tmp->item = item;
  assert(tmp != NULL);
  if(isempty_queue(this)) {
    this->front = tmp;
    this->rear = this->front;
    tmp->link = NULL;
  }
  else{
    this->rear->link = tmp;
    this->rear = tmp;
    tmp->link = NULL;
  }
}

queue_item_t remove_queue (queue *this) {
  assert (! isempty_queue (this));
  queue_node *tmp = this->front;
  queue_item_t string = tmp->item;
  this->front = this->front->link;
  return string;
}

bool isempty_queue (queue *this) {
  return this->front == NULL;
}


@


1.1
log
@-
@
text
@a9 2
#define STUBPRINTF(...) fprintf (stderr, __VA_ARGS__);

d12 2
a13 2
   queue_item_t item;
   queue_node *link;
d17 2
a18 2
   queue_node *front;
   queue_node *rear;
d21 1
d23 5
a27 2
   STUBPRINTF ("return NULL\n");
   return NULL;
d31 2
a32 2
   assert (isempty_queue (this));
   free (this);
d36 13
a48 1
   STUBPRINTF ("item =\n\t\"%s\"\n", item);
d52 5
a56 3
   assert (! isempty_queue (this));
   STUBPRINTF ("return NULL\n");
   return NULL;
d60 1
a60 1
   return this->front == NULL;
d63 1
@
